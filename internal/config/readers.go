// Code generated by verigo. DO NOT EDIT.
package config

import (
	"github.com/rs/zerolog/log"
)

// ReadAPIConfig reads APIConfig from env
func ReadAPIConfig(prefix ...string) (APIConfig, error) {
	p := ""
	if len(prefix) > 0 {
		p = prefix[0]
	}
	var cfg APIConfig
	err := envconfig.Process(p, &cfg)
	return cfg, err
}

// MustReadAPIConfig reads APIConfig from env, panic if error
func MustReadAPIConfig(prefix ...string) APIConfig {
	cfg, err := ReadAPIConfig(prefix...)
	if err != nil {
		log.Fatal().Err(err).Send()
	}
	return cfg
}

// ReadPostgresConfig reads PostgresConfig from env
func ReadPostgresConfig(prefix ...string) (PostgresConfig, error) {
	p := ""
	if len(prefix) > 0 {
		p = prefix[0]
	}
	var cfg PostgresConfig
	err := envconfig.Process(p, &cfg)
	return cfg, err
}

// MustReadPostgresConfig reads PostgresConfig from env, panic if error
func MustReadPostgresConfig(prefix ...string) PostgresConfig {
	cfg, err := ReadPostgresConfig(prefix...)
	if err != nil {
		log.Fatal().Err(err).Send()
	}
	return cfg
}

// ReadMigrationConfig reads MigrationConfig from env
func ReadMigrationConfig(prefix ...string) (MigrationConfig, error) {
	p := ""
	if len(prefix) > 0 {
		p = prefix[0]
	}
	var cfg MigrationConfig
	err := envconfig.Process(p, &cfg)
	return cfg, err
}

// MustReadMigrationConfig reads MigrationConfig from env, panic if error
func MustReadMigrationConfig(prefix ...string) MigrationConfig {
	cfg, err := ReadMigrationConfig(prefix...)
	if err != nil {
		log.Fatal().Err(err).Send()
	}
	return cfg
}
